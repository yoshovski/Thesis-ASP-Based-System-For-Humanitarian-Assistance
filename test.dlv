% if before a Rule, there are two %% (it has been verified and works)

#show inShift/3.

%% DATA %%
receptionCenter(r1,"Krakow",100).
receptionCenter(r2,"Warsaw",200).

% volunteer(VolunteerID,Name,From).
volunteer(v1,"Mark Carter","Krakow").
volunteer(v2,"John Travolta","Warszawa").
volunteer(v3,"John Travolta","Krakow").
volunteer(v4,"John Travolta","Krakow").
volunteer(v5,"John Travolta","Krakow").


canPerformRole(v1,"nurse").
canPerformRole(v3,"nurse").
canPerformRole(v4,"nurse").

canPerformRole(v1,"doctor").
canPerformRole(v2,"translator").


distantFrom(v2,"Krakow",3).
distantFrom(v2,"Warszawa",2).
distantFrom(v1,"Krakow",3).
distantFrom(v1,"Warszawa",2).

distances("Krakow","Warszawa",1).

canGo(V,L2,D) :- distances(L,L2,D), volunteer(V,_,L), maxRange(V,Max), D <= Max.

shift(1,r1,"Monday",7,6).
shift(2,r2,"Monday",13,6).

canBeIn(VolunteerID,ShiftID,Role) :- 
    shift(ShiftID,_,Day,_,Duration),
    canPerformRole(VolunteerID,Role).

inShift(VolunteerID,ShiftID,Role) | outShift(VolunteerID,ShiftID,Role) :- canBeIn(VolunteerID,ShiftID,Role).

%% Each volunteer is assiggned to at least one shift
:- volunteer(VolunteerID,_), #count{VolunteerID : inShift(VolunteerID,_,_)} != 1.

%% Each volunteer can perform only one role at a time in a shift
:- inShift(VolunteerID,ShiftID,Role1), inShift(VolunteerID,ShiftID,Role2), Role1 != Role2.

%% Each volunteer can perform only roles that he can perform
:- inShift(VolunteerID,_,Role), not canPerformRole(VolunteerID,Role).


% Volunteer has a preference for a working location (e.g. he wants to work in a reception center in his city)
distantFrom(V,L,0) :- volunteer(V,_,L). % Having preference for the location of the reception center where the volunteer is registered, therefore the cost (distance) is 0

:~ volunteer(V,_,_), not inShift(V,Sh,R), canPerformRole(V,R), shift(Sh,_,_,_,_). [1@3,V,Sh,R]

:- inShift(V,Sh,R), distantFrom(V,L,D), receptionCenter(Sh,L,_).


% A volunteer cannot be assigned to a shift if he cannot go to the reception center where the shift takes place
:- inShift(VolunteerID,ShiftID,_), not canGo(VolunteerID,L,D), receptionCenter(RC,L,_).

%%%% TODO: Short Path between all start and end points,
% model distance(city1, city2, distance)
% canGo(Volunteer, city, distance) :- volunteer(Volunteer,_,city), maxRange(Volunteer,Max), distance(city,_,D), D <= Max.
% max volunteers per reception center, minimize cost for going to a city