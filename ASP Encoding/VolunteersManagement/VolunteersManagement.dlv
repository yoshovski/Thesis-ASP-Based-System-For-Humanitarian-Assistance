% if before a Rule, there are two %% (it has been verified and works)

#show inShift/3.



% hotspot(ID,Name,City).
% capacity is related to the number of people that can be hosted in the hotspot
% Hotspot is a collective center where the first identification takes place and where health care is provided.
% hotspot(h1,"Hotspot1","Krakow").


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% VOLUNTEER ASSISTANCE TEAM MANAGEMENT %%%

% The model is based on the following assumptions:
% - The number of volunteers is limited
% - A volunteer can perform different roles
% - A volunteer can have preferences on the location where to be assigned
% - A volunteer can have preferences on the type of role to be assigned to
% - Each reception center can require a minimum number of volunteers for a specific role
% - Medical related roles have higher priority than non-medical related roles
% - Each volunteer can be assigned to different roles based on his skills
% - A volunteer can perform only one role at a time
% - Each volunteer specifies a maximum number of hours per week tha he can work
% - Each reception center can have different shifts in which volunteers can be assigned

%% MODEL %%
% volunteer(VolunteerID,Name).
% canPerformRole(VolunteerID,role).
% preference(VolunteerID,Location,Role,Priotity).
% requiredRole(ReceptionCenterID,Role).
% absent(VolunteerID,ShiftID).

%% DATA %%
% receptionCenter(r1,"Krakow",100).
% receptionCenter(r2,"Warsaw",200).


% volunteer(VolunteerID,Name,From).
% volunteer(v1,"Mark Carter","Krakow").
% volunteer(v2,"John Travolta","Krakow").
% volunteer(v3,"John Travolta","Krakow").
% volunteer(v4,"John Travolta","Krakow").
% volunteer(v5,"John Travolta","Krakow").


% canPerformRole(VolunteerID,Role). 
% Role -> nurse, doctor, translator, psychologist 
% canPerformRole(v1,"nurse").
% canPerformRole(v3,"nurse").
% canPerformRole(v4,"nurse").

% canPerformRole(v1,"doctor").
% canPerformRole(v2,"translator").


% % preference(VolunteerID,Role,Priority).
% % Role -> the role that the volunteer prefers to perform
% % Priority -> the priority of the preference (1 is the highest priority)
% preferredRole(v1,"doctor",1).
% preferredRole(v2,"translator",1).

% maxLocationRange(VolunteerID,Location,Range). (OPTIONAL)
% Volunteers will be assigned to their location of origin,otherwise they will be assigned to the location within the range specified
% Location -> the location where the volunteer prefers to be assigned
% Range -> the range of distance within the volunteer wants to be assigned
%maxLocationRange(v1,"Krakow",1).


% All the end points (reception centers) and the distance from the volunteer's start preference location, within the range specified
% withinRange(VolunteerID,ReceptionCenterLocation,Distance).
% Distance -> the distance between the volunteer's location and the end location (reception center)

% This rule also makes sure that each volunteer has a start location, otherwise the volunteer will not be assigned to any shift
withinRange(VolunteerID,RC,Distance) :- volunteer(VolunteerID,_,Location), receptionCenter(RC,Location,_), Distance = 0. % Having preference for the location of the reception center where the volunteer is registered, therefore the cost (distance) is 0

% preferedLocation(VolunteerID,Location,Distance).
% Volunteers will be assigned to their location of origin,otherwise they will be assigned to the location within the range specified
% Location -> the location where the volunteer prefers to be assigned
% Range -> the range of distance within the volunteer wants to be assigned

% A volunteer can have specific amount of time that he can work per week (MANDATORY)
% maxHoursPerWeek(VolunteerID,MaxHours).
maxHoursPerWeek(v1,20).

% A working right represents the time that a volunteer can work in a specific shift
%workingRights(Daily,Weekly,BreakBetweenShift). (ONLY ONE ATOM)
% Daily -> the maximum number of hours that a volunteer is alowed to work per day
% Weekly -> the maximum number of hours that a volunteer is allowed to work per week
% BreakBetweenShift -> the minimum number of hours that a volunteer must have between two shifts
workingRights(8,40,11).

% maxHoursPerDat() is the maximum number of hours that a volunteer can contribute per day
% A volunteer can have specific amout of time that he can work per day (MANDATORY)
% maxHoursPerDay(VolunteerID,MaxHours).
% maxHoursPerDay(v1,8).
% maxHoursPerDay(v2,8).
% maxHoursPerDay(v3,8).
% maxHoursPerDay(v4,8).

% Prefered Range of hours for a shift (OPTIONAL)
% preferredShiftRange(VolunteerID,StartHour,Duration,Day).
% StartHour -> the earliest hour that the volunteer wants to start working
% Duration -> Maximum length of time during which the volunteer offers availability to provide service. The shift must be between StartHour and StartHour+Interval
% Day -> the day of the week for which this preference is valid
preferredShiftRange(v1,7,4,"mon").

% Volunteers can have preferences for the working hours (not all of them have)
% hasHourPreference(VolunteerID,Day).
% Day -> the day of the week for which this preference is valid
hasHourPreference(V,Day) :- preferredShiftRange(V,_,_,Day).

% A volunteer can be avaialable only for specific days
% available(VolunteerID,Day).

day("mon").
day("tue").
day("wed").
day("thu").
day("fri").
day("sat").
day("sun").

% A volunteer can be available only for specific days
% availableOn(VolunteerID,Days).
% Days -> a list of days that the volunteer is available (e.g. ["mon","tue","wed","thu","fri","sat","sun"])
% availableOn(v1,["mon","tue","wed","thu","fri","sat","sun"]).
% availableOn(v2,["mon","tue","wed","thu","fri","sat","sun"]).
% availableOn(v3,["mon","tue","wed","thu","fri","sat","sun"]).
% availableOn(v4,["mon","tue","wed","thu","fri","sat","sun"]).


% A volunteer can become unavailable for indefinite time (e.g. due to illness, not wanting to offer volunteer work anymore, etc.)
% isUnavailable(VolunteerID).

% A volunteer can be absent for a specific shift
% isAbsentOnShift(VolunteerID,ShiftID).

% A volunteer can be absent on a specific day
% isAbsentOnDay(VolunteerID,Day).

% A reception center can be temporarily inoperative (e.g. due to a natural disaster, missing equipment, etc.)
% inoperative(ReceptionCenterID).

isAbsentOnShift(V,S) :- shift(S,_,D,_,_), isAbsentOnDay(V,D).

% A reception center can have minimum requirements for volunteers with specific role
% requiredRoleAt(ReceptionCenterID,Role,Min_Number,Max_Number).
% ReceptionCenterID -> the id of the reception center where the role is required
% Role -> the role that is required
% Min_Number -> the minimum number of volunteers that are required for the role
% Max_Number -> the maximum number of volunteers that are required for the role
% % requiredRoleAt(r1,"nurse",30,60).
% % requiredRoleAt(r2,"nurse",30,50).
% % requiredRoleAt(r1,"doctor",1,5).
% % requiredRoleAt(r1,"translator",1,1).

%% If there is a requirement for a role for a reception center, then the role is required for each shift in the reception center
requiredRoleForShift(ShiftID,Role,Min,Max) :- requiredRoleAt(RCID,Role,Min,Max), shift(ShiftID,RCID,_,_,_).


% A shift is a specific time slot in a specific reception 
% shift(ShiftID,ReceptionCenter,Day,Start,Duration).
% Day -> the day of the week when the shift takes place (monday, tuesday, wednesday, thursday, friday, saturday, sunday)
% Start -> the starting time of the shift (in hours)
% Duration -> the duration of the shift (in hours)
% e.g. shift(s1,r1,"Monday",8,8) means that the shift s1 takes place in the reception center r1 on Monday from 8:00 to 16:00
shift(1,r1,"mon",7,6).
shift(2,r1,"mon",13,6).
shift(3,r1,"mon",19,6).
shift(4,r1,"mon",1,6).

% Important roles are roles that are required for the reception center to function properly and are crucial for some activities
importantRole("nurse").
importantRole("doctor").

%% RULES %%
% A voliunteer is available for a shift if: (only time and day availability is considered)
% - he is available for the day of the shift
% - he is not absent for the shift
% - he is not absent for the day of the shift
% - he is not unavailable for indeterminate time
% - A volunteer can be assigned to a shift only if he can cover the shift duration
%% A volunteer can be assigned to a shift only if he is avaiable for the time and day of the shift
%% A volunteer can be assigned to a shift only if he can perform the role required by the shift
% A volunteer can be assigned to a shift of a recetion center only if the role is needed
% A volunteer is within the range of the reception center
canBeIn(V,S,Role) :- 
    shift(S,RC,Day,_,Duration), 
    &member(Day,ListOfDays;), 
    availableOn(V,ListOfDays), 
    not isAbsentOnShift(V,S), 
    not isUnavailable(V), 
    maxHoursPerDay(V,MaxHoursPerDay), 
    Duration <= MaxHoursPerDay,
    withinRange(V,RC,_),
    canPerformRole(V,Role),
    requiredRoleForShift(S,Role,_,_),
    not inoperative(RC).

inShift(VolunteerID,ShiftID,Role) | outShift(VolunteerID,ShiftID,Role) :- canBeIn(VolunteerID,ShiftID,Role).

%% Each volunteer can perform only one role at a time in a shift
:- inShift(VolunteerID,ShiftID,Role1), inShift(VolunteerID,ShiftID,Role2), Role1 != Role2.

%% If a volunteer performs an important role in a shift, he cannot perform any other role in the same shift
%:- inShift(VolunteerID,ShiftID,Role1), inShift(VolunteerID,ShiftID,Role2), Role1 != Role2, importantRole(Role1). 


%% Each volunteer can perform only roles that he can perform
%:- inShift(VolunteerID,_,Role), not canPerformRole(VolunteerID,Role).

%% All shifts are covered (it may happen that not all shifts are covered if there is lack of volunteers)
%:- shift(ShiftID,_,_,_,_), #count{VolunteerID : inShift(VolunteerID,ShiftID,_)} == 0.

%% Each volunteer can work only for a maximum number of hours per day
totalDailyHours(V,Total) :- volunteer(V,_,_), day(D), #sum{H,Sh : inShift(V,Sh,_), shift(Sh,_,D,_,H)} = Total.
:- totalDailyHours(V,Total), maxHoursPerDay(V,Max), Total > Max.
:- totalDailyHours(V,Total), workingRights(Daily,_,_), Total > Daily.

%% Each volunteer can work only a maximum number of hours per week
totalWeeklyHours(V,Total) :- volunteer(V,_,_), #sum{H,V,S : inShift(V,S,_), shift(S,_,_,_,H)}=Total.
:- totalWeeklyHours(V,Total), maxHoursPerWeek(V,Max), Total > Max.
:- totalWeeklyHours(V,Total), workingRights(_,Weekly,_), Total > Weekly.

%% Each volunteer can be assigned to one reception center for the same day
:- inShift(V,S,_), inShift(V,S1,_), shift(S,RC,Day,_,_), shift(S1,RC1,Day,_,_), RC != RC1, S != S1.

%% The maximum number of volunteers in a shift must not be exceeded
:- requiredRoleForShift(S,Role,_,Max), #count{V : inShift(V,S,Role)} > Max.

%% Volunteers cannot be assinged to shifts which don't satisfy their shift range preferences 
% Some volunteers don't have any range preferences, so they can be assigned to any shift
satisfyHourPreference(V,Day) :- hasHourPreference(V,Day), preferredShiftRange(V,Ps,Pi,Day), inShift(V,S,_), shift(S,_,Day,Start,Duration), Ps <= Start, Pi+Ps >= Start + Duration.
:- inShift(V,Sh,_), shift(Sh,_,Day,_,_), not satisfyHourPreference(V,Day), hasHourPreference(V,Day).

% Required roles for a shift in a reception center that are not covered by volunteers
% NumberUncovered -> the number of volunteers that are still needed for the role
uncoveredRoles(ShiftID,NumberUncovered,Role) :- requiredRoleForShift(ShiftID,Role,Min,_), #count{VolunteerID : inShift(VolunteerID,ShiftID,Role)}=N, N < Min, NumberUncovered=Min-N.

% Maximize the number of shifts covering important roles
% Pay for the shifts that don't cover important roles
:~ importantRole(Role), uncoveredRoles(ShiftID,N,Role). [N@5,ShiftID]

%% A minimum number of volunteers is required for some roles in some reception centers
%% This means that all shifts in which the role is required must have at least the minimum number of volunteers assigned
% Since the number of volunteers is not known, a penalty for each shift that doesn't cover the minimum number of volunteers must be used
% The higher priority though is to cover the important roles and then to cover as much shifts as possible
% However, the next rule already takes care of this, because it maximizes the number of shifts that a volunteer is assigned to.
% in case the data provided is known for already being enough to cover all shifts, a strong costraint can be used instead of the penalty
% In the use case, it is considered that the data provided is not enough to cover all shifts
% :- not importantRole(Role), uncoveredRoles(ShiftID,N,Role).

%% Maximize the number of shifts that a volunteer is assigned to
% Pay for the volunteers that can perform a role but are not assigned to a shift
:~ volunteer(V,_,_), not inShift(V,Sh,R), canPerformRole(V,R), shift(Sh,_,_,_,_). [1@3,V,Sh]

%% Maximize the volunteers assigned to closer reception centers
% Pay for the volunteers that are assigned to a further reception center than their preferred location
:~ inShift(V,Sh,_), shift(Sh,RC,_,_,_), withinRange(V,RC,D). [D@2,V] 

%% Maximize the number of different volunteers assigned to a shift
% Pay for the shifts that have the same volunteer assigned to them
:~ inShift(V,Sh,_), inShift(V,Sh1,_), Sh != Sh1. [1@1,Sh]
