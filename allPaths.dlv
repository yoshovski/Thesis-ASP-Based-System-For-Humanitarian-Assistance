
#show inPath/3.
% #show reached/1.
#show totalDistance/1.
#show bestLocation/1.
#show inRealEnd/1.
% #show outward/2.
% #show inward/2.

city("A").
city("B").
city("C").
city("D").
city("E").

distance("A","B",5).
distance("A","C",2).
distance("A","D",3).
distance("D","B",1).
distance("D","E",2).
distance("C","E",1).

distance(X,Y,Z) :- distance(Y,X,Z).

%start("B").
start("A").
end("C").
end("E").

inRealEnd(X) | outRealEnd(X) :- end(X).
inPath(X,Y,C) | outPath(X,Y,C) :- distance(X,Y,C).

:- #count{X : inRealEnd(X)}=N, N!=1.
reached(X) :- start(X).
reached(X) :- inPath(Y,X,C), reached(Y).
:- inPath(X,Y,_), inPath(X,Y1,_), Y!=Y1.
:- inPath(X,Y,_), inPath(X1,Y,_), X!=X1.
:- inRealEnd(X), not reached(X).

% Number of outward arcs for each reached node
outward(X,N) :- reached(X), #count{X,Y : inPath(X,Y,_)}=N.

% Number of inward arcs for each reached node
inward(Y,N) :- reached(Y), #count{X,Y : inPath(X,Y,_)}=N.

% The number of outward arcs from a RealEnd point must be less or equal to 1
:- outward(X,N), inRealEnd(X), N>0.

% The number of inward arcs in a RealEnd point must be zero
:- inward(X,N), inRealEnd(X), N<1.

% the number of outward arcs and inward arcs from start is less or equal to 1
:- inward(X,N), outward(X,M), start(X), N+M>1.

% don't include in path if the node has not been reached
:- inPath(X,Y,_), not reached(Y).

totalDistance(X) :- #sum{C,A,B : inPath(A,B,C)}=X.


% :~ inPath(X,Y,C). [C@1,X]