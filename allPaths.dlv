
#show inPath/3.
% #show reached/1.
#show totalDistance/1.
#show bestLocation/1.
#show inRealEnd/1.
% #show outward/2.
% #show inward/2.

city("A").
city("B").
city("C").
city("D").
city("E").

distance("A","B",5).
distance("A","C",2).
distance("A","D",3).
distance("D","B",1).
distance("D","E",2).
distance("C","E",1).

distance(X,Y,Z) :- distance(Y,X,Z).

%start("B").
start("A").
end("C").
end("E").

inRealEnd(X) | outRealEnd(X) :- end(X).
inPath(X,Y,C) | outPath(X,Y,C) :- distance(X,Y,C).

:- #count{X : inRealEnd(X)}=N, N!=1.
reached(X) :- start(X).
reached(X) :- inPath(Y,X,C), reached(Y).
:- inPath(X,Y,_), inPath(X,Y1,_), Y!=Y1.
:- inPath(X,Y,_), inPath(X1,Y,_), X!=X1.
:- inRealEnd(X), not reached(X).

% Number of outward arcs for each reached node
outward(X,N) :- reached(X), #count{X,Y : inPath(X,Y,_)}=N.

% Number of inward arcs for each reached node
inward(Y,N) :- reached(Y), #count{X,Y : inPath(X,Y,_)}=N.

% The number of outward arcs from a RealEnd point must be less or equal to 1
:- outward(X,N), inRealEnd(X), N>0.

% The number of inward arcs in a RealEnd point must be zero
:- inward(X,N), inRealEnd(X), N<1.

% the number of outward arcs and inward arcs from start is less or equal to 1
:- inward(X,N), outward(X,M), start(X), N+M>1.

% don't include in path if the node has not been reached
:- inPath(X,Y,_), not reached(Y).

totalDistance(X) :- #sum{C,A,B : inPath(A,B,C)}=X.


% :~ inPath(X,Y,C). [C@1,X]

%%%% IN PROGRESS
%%% Shortest Path between start and end (more start points possible and more end points possible)
% The shortest path per each "start" point to any "end" point is found in a unique Answer Set
% e.g. start("A"), start("B"), end("C"), end("E") will find the shortest path from "A" to any "end" point 
% and the shortest path from "B" to any "end" point

% #show inPath/4.
% #show outward/3.
% #show inward/3.
% #show all/2.


% element(e1).
% element(e2).

% start(e1,"A").
% start(e2,"B").
% end("C").
% end("E").

% inPath(E,X,Y,C) | outPath(E,X,Y,C) :- distance(X,Y,C), start(E,_).
% reached(E,X) :- start(E,X).
% reached(E,X) :- inPath(E,Y,X,C), reached(E,Y).
% :- inPath(E,X,Y,_), inPath(E,X,Y1,_), Y!=Y1.
% :- inPath(E,X,Y,_), inPath(E,X1,Y,_), X!=X1.

% % there is not a start point that has not reached any end point
% :- #count{X : end(X), reached(E,X)}=Y, Y!=1, start(E,_).

% % count the number of end points assigned to inPath for each start point
% all(E,P) :- start(E,_), #count{Y : end(Y), inPath(E,_,Y,_)}=P.

% % Number of outward arcs for each reached node
% outward(E,X,N) :- reached(E,X), #count{E,X,Y : inPath(E,X,Y,_)}=N.

% % Number of inward arcs for each reached node
% inward(E,Y,N) :- reached(E,Y), #count{E,X,Y : inPath(E,X,Y,_)}=N.

% % The number of outward and inward arcs from start point must be less or equal to 1
% :- outward(E,X,N), inward(E,X,M), start(E,X), N+M>1.

% % From each intermede node, there must be at least one outward arc and at least one inward arc
% :- outward(E,X,N), inward(E,X,N), not start(E,X), N!=1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% number of end points reached per element
% numberEndPointsReached(E,X) :- #count{Y,E : end(Y), reached(E,Y)}=X, element(E).
% :- element(E), numberEndPoints(E,N), N!=1.

% :- #count{X,E : end(X), reached(E,X)}=Y, Y!=1. % Only one end point reached per element
% totalDistance(E,X,S) :- #sum{C,E,A,B : inPath(E,A,B,C)}=X, start(E,S). 
% bestLocation(E,X) :- end(X), reached(E,X).

% tot(E,Start,End,D) :- totalDistance(E,D,Start), bestLocation(E,End).

%:~ inPath(E,X,Y,C). [C@1,E,X,Y]