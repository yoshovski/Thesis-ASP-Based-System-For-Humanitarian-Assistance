%%%%%%%%%%%%%%%%%%%%% MODEL %%%%%%%%%%%%%%%%%%%%%% 
#show inShift/3.

%%% Reception Center %%%
receptionCenter(ID,City,Capacity).
volunteer(ID,Name,Locality).
canPerformRole(Volunteer,Role).

%%% Reception Center Shift %%%
shift(ShiftID,ReceptionCenter,Day,Start,Duration).
requiredRoleAt(ReceptionCenterID,Role,Min_Number,Max_Number).
requiredRoleForShift(ShiftID,Role,Min,Max).
importantRole(Role).


%%% Volunteer %%%



%%% Volunteer Time Availability %%%
workingRights(Daily,Weekly,BreakBetweenShift).
maxHoursPerWeek(VolunteerID,MaxHours).
maxHoursPerDay(VolunteerID,MaxHours).

day(Day).
availableOn(VolunteerID,Days).
isUnavailable(VolunteerID).
isAbsentOnShift(VolunteerID,ShiftID).
isAbsentOnDay(VolunteerID,Day).
inoperative(ReceptionCenterID).

preferredShiftRange(VolunteerID,StartHour,Duration,Day).

%%% Volunteer Location Preference %%%
maxLocationRange(VolunteerID,Location,Range).
withinRange(VolunteerID,RC,Distance).

%%% Shift %%%




%%%%%%%%%%%%%%%%%%%%% RULES %%%%%%%%%%%%%%%%%%%%%%


isAbsentOnShift(V,S) :- shift(S,_,D,_,_), isAbsentOnDay(V,D).
requiredRoleForShift(ShiftID,Role,Min,Max) :- requiredRoleAt(RCID,Role,Min,Max), shift(ShiftID,RCID,_,_,_).

%%% Reduce Ammisability Field %%%
canBeIn(V,S,Role) :- 
    shift(S,RC,Day,_,Duration), 
    &member(Day,ListOfDays;), 
    availableOn(V,ListOfDays), 
    not isAbsentOnShift(V,S), 
    not isUnavailable(V), 
    maxHoursPerDay(V,MaxHoursPerDay), 
    Duration <= MaxHoursPerDay,
    withinRange(V,RC,_),
    canPerformRole(V,Role),
    requiredRoleForShift(S,Role,_,_),
    not inoperative(RC).

%%% Guess and Check %%%
inShift(VolunteerID,ShiftID,Role) | outShift(VolunteerID,ShiftID,Role) :- canBeIn(VolunteerID,ShiftID,Role).

%% Each volunteer can perform only one role at a time in a shift
:- inShift(VolunteerID,ShiftID,Role1), inShift(VolunteerID,ShiftID,Role2), Role1 != Role2.

%% Each volunteer can perform only roles that he can perform
%:- inShift(VolunteerID,_,Role), not canPerformRole(VolunteerID,Role).

%%%%%%% TIME AVAILABILITY %%%%%%%

%% Each volunteer can work only for a maximum number of hours per day
totalDailyHours(V,Total) :- volunteer(V,_,_), day(D), #sum{H,Sh : inShift(V,Sh,_), shift(Sh,_,D,_,H)} = Total.
:- totalDailyHours(V,Total), maxHoursPerDay(V,Max), Total > Max.
:- totalDailyHours(V,Total), workingRights(Daily,_,_), Total > Daily.

%% Each volunteer can work only a maximum number of hours per week
totalWeeklyHours(V,Total) :- volunteer(V,_,_), #sum{H,V,S : inShift(V,S,_), shift(S,_,_,_,H)}=Total.
:- totalWeeklyHours(V,Total), maxHoursPerWeek(V,Max), Total > Max.
:- totalWeeklyHours(V,Total), workingRights(_,Weekly,_), Total > Weekly.

%% Volunteers cannot be assinged to shifts which don't satisfy their shift range preferences 
% Some volunteers don't have any range preferences, so they can be assigned to any shift
hasHourPreference(V,Day) :- preferredShiftRange(V,_,_,Day).
satisfyHourPreference(V,Day) :- hasHourPreference(V,Day), preferredShiftRange(V,Ps,Pi,Day), inShift(V,S,_), shift(S,_,Day,Start,Duration), Ps <= Start, Pi+Ps >= Start + Duration.
:- inShift(V,Sh,_), shift(Sh,_,Day,_,_), not satisfyHourPreference(V,Day), hasHourPreference(V,Day).

%%% Location


%% Each volunteer can be assigned to one reception center for the same day
:- inShift(V,S,_), inShift(V,S1,_), shift(S,RC,Day,_,_), shift(S1,RC1,Day,_,_), RC != RC1, S != S1.

%%% Reception Requirements

%% The maximum number of volunteers in a shift must not be exceeded
:- requiredRoleForShift(S,Role,_,Max), #count{V : inShift(V,S,Role)} > Max.



% Required roles for a shift in a reception center that are not covered by volunteers
% NumberUncovered -> the number of volunteers that are still needed for the role
uncoveredRoles(ShiftID,NumberUncovered,Role) :- requiredRoleForShift(ShiftID,Role,Min,_), #count{VolunteerID : inShift(VolunteerID,ShiftID,Role)}=N, N < Min, NumberUncovered=Min-N.

% Maximize the number of shifts covering important roles
% Pay for the shifts that don't cover important roles
:~ importantRole(Role), uncoveredRoles(ShiftID,N,Role). [N@5,ShiftID]

%% A minimum number of volunteers is required for some roles in some reception centers
%% This means that all shifts in which the role is required must have at least the minimum number of volunteers assigned
% Since the number of volunteers is not known, a penalty for each shift that doesn't cover the minimum number of volunteers must be used
% The higher priority though is to cover the important roles and then to cover as much shifts as possible
% However, the next rule already takes care of this, because it maximizes the number of shifts that a volunteer is assigned to.
% in case the data provided is known for already being enough to cover all shifts, a strong costraint can be used instead of the penalty
% In the use case, it is considered that the data provided is not enough to cover all shifts
% :- not importantRole(Role), uncoveredRoles(ShiftID,N,Role).

%% All shifts are covered (it may happen that not all shifts are covered if there is lack of volunteers)
%:- shift(ShiftID,_,_,_,_), #count{VolunteerID : inShift(VolunteerID,ShiftID,_)} == 0.

%% Maximize the number of shifts that a volunteer is assigned to
% Pay for the volunteers that can perform a role but are not assigned to a shift
:~ volunteer(V,_,_), not inShift(V,Sh,R), canPerformRole(V,R), shift(Sh,_,_,_,_). [1@3,V,Sh,R]

withinRange(VolunteerID,RC,Distance) :- volunteer(VolunteerID,_,Location), receptionCenter(RC,Location,_), Distance = 0.
%% Maximize the volunteers assigned to closer reception centers
% Pay for the volunteers that are assigned to a further reception center than their preferred location
:~ inShift(V,Sh,_), shift(Sh,RC,_,_,_), withinRange(V,RC,D). [D@2,V] 

%% Maximize the number of different volunteers assigned to a shift
% Pay for the shifts that have the same volunteer assigned to them
:~ inShift(V,Sh,_), inShift(V,Sh1,_), Sh != Sh1. [1@1,Sh]
