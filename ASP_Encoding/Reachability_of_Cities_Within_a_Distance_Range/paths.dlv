#show withinRange/3.

distance("Szczecin","Gorzow",105).
distance("Gorzow","Poznan",136).
distance("Poznan","Wroclaw",183).
distance("Wroclaw","Opole",97).
distance("Opole","Katowice",104).
distance("Katowice","Krakow",82).
distance("Krakow","Kielce",114).
distance("Krakow","Rzeszow",168).
distance("Rzeszow","Przemysl",92).
distance("Kielce","Warszawa",181).
distance("Katowice","Lodz",205).
distance("Lodz","Warszawa",140).
distance("Poznan","Lodz",212).
distance("Lodz","Torun",183).
distance("Torun","Bydgoszcz",46).
distance("Torun","Gdansk",170).
distance("Gdansk","Olsztyn",182).
distance("Olsztyn","Warszawa",215).
distance("Warszawa","Bialystok",200).
distance("Bialystok","Olsztyn",225).
distance("Gdansk","Szczecin",361).
distance("Warszawa","Lublin",173).
distance("Rzeszow","Lublin",177).
distance("Chelm","Lublin",70).
distance("Tomaszow Lubelski","Lublin",125).

maxLocationRange(v1,"Krakow",200).
%maxLocationRange(v2,"Warszawa",200).

receptionCenter("01","Wroclaw",50).
receptionCenter("02","Torun",50).
receptionCenter("03","Bydgoszcz",50).
receptionCenter("04","Gorzow",50).
% receptionCenter("05","Wasilkow",50).
receptionCenter("06","Kielce",50).
receptionCenter("07","Olsztyn",50).
receptionCenter("08","Poznan",50).
receptionCenter("09","Szczecin",50).
receptionCenter("10","Lodz",50).
receptionCenter("11","Krakow",50).
receptionCenter("12","Warszawa",1500).
receptionCenter("13","Opole",50).
receptionCenter("14","Gdansk",50).
receptionCenter("15","Katowice",50).
%receptionCenter("A","Dorohusk-Osada",50).
%receptionCenter("B","Dolhobyczow",50).
%receptionCenter("C","Horodlo",50).
%receptionCenter("D","Lubycza Krolewska",50).
receptionCenter("E","Chelm",50).
%receptionCenter("F","Hrubieszow",50).
receptionCenter("G","Tomaszow Lubelski",50).
receptionCenter("H","Przemysl",50).
%receptionCenter("I","Mlyny",50).
%receptionCenter("J","Lodyna",50).
%receptionCenter("K","Krowica",50).
%receptionCenter("L","Medyka",50).
%receptionCenter("M","Korczowa",50).

node(X) :- city(X). % city is a node
arc(X,Y,Cost) :- distance(X,Y,Cost). % The distance between two cities is the cost of the arc between them
arc(X,Y,Cost) :- arc(Y,X,Cost). % Double the arcs to make the graph undirected

start(V,X) :- maxLocationRange(V,X,_). % The start node X is the preferred location of the volunteer V
end(X) :- receptionCenter(_,X,_). % The end node X is the reception center RC

{inRealStart(V,Start) : start(V,Start)} = 1.
{inRealEnd(End) : end(End)} = 1.

%inRealStart(V,Start) | outRealStart(V,Start) :- start(V,Start).
%inRealEnd(End) | outRealEnd(End) :- end(End).

%:- #count{X : inRealStart(V,X)}=Z, Z!=1.
%:- #count{X : inRealEnd(X)}=Z, Z!=1.

inPath(V,X,Y,C) | outPath(V,X,Y,C) :- arc(X,Y,C), start(V,_).
reached(V,X) :- inRealStart(V,X).
reached(V,X) :- inPath(V,Y,X,C), reached(V,Y).

% there must not be two arcs starting at the same node
:- inPath(V,X,Y,_), inPath(V,X,Y1,_), Y!=Y1.

% there must not be two arcs ending at the same node
:- inPath(V,X,Y,_), inPath(V,X1,Y,_), X!=X1.

% there aren't outward arcs from Real End node
:- inPath(V,X,Y,_), inRealEnd(X).

% there aren't inward arcs to Real Start node
:- inPath(V,X,Y,_), inRealStart(V,Y).

% The path must reach the real end node
:- inRealEnd(X), not reached(V,X), inRealStart(V,_).

% don't include in path if the node has not been reached
:- inPath(V,X,Y,_), not reached(V,Y).

% Total distance travelled
totalDistance(X) :- #sum{C,V,A,B : inPath(V,A,B,C)}=X.

% The distance travelled must be less than the maximum range of the volunteer
% The distance travelled from start location of the volunteer, must be less than the maximum km range requirement of the volunteer
:- totalDistance(X), maxLocationRange(V,_,Y), inRealStart(V,_), X>Y. 

% % All the end points (cities) and the distance from the volunteer's start preference location, within the range specified
% % withinRange(VolunteerID,EndLocation,Distance).
% % Distance -> the distance between the volunteer's location and the end location
% withinRange(V,L,D) :- inRealStart(V,X), inRealEnd(L), totalDistance(D).

% All the end points (reception centers) and the distance from the volunteer's start preference location, within the range specified
% withinRange(VolunteerID,ReceptionCenter,Distance).
% Distance -> the distance between the volunteer's location and the end location (reception center)
withinRange(V,RC,D) :- inRealStart(V,X), inRealEnd(L), receptionCenter(RC,L,_), totalDistance(D).

